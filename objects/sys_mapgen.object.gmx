<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT MAPGEN

    global.scale = floor(min((global.dw / global.gw), global.dh / global.gh));
    p = global.scale;
    
    var grw = global.gridsize;
    var grh = grw;
    
    room_width = grw * p;
    room_height = grh * p;
    
    hue = 0;
    
/*    var wsz = grw * global.scale;
    var wx = (global.dw - wsz) div 2;
    var wy = (global.dh - wsz) div 2;
    
    window_set_size(wsz, wsz);
    window_set_position(wx, wy);
    window_center();

    global.dsurf = surface_create(grw, grh);
    surface_set_target(global.dsurf);
    draw_clear_alpha(c_white,0);
    surface_reset_target();
    maxz = global.scale;

    xsurf = 0;
    ysurf = 0;
//    xsurf = round((window_get_width() - (grw * maxz)) / 2);
//    ysurf = round((window_get_height() - (grh * maxz)) / 2);
    
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CHECK FOR NEW GRID GEN

    // RANDOMIZE CELLS
    if keyboard_check_pressed(vk_f1)
    {
        var chance = get_integer("Randomize all cells - Live chance 0-100", 50);
        
        randomize_grid(global.grid, chance);
        
        global.upd = true;
    }

    // DO RNG
    if keyboard_check_pressed(vk_f2)
    {
        var coords = get_integer("Random Neighborhood Graph - Coordinate count", global.gridsize div 4);
        var circle = get_integer("RNG Coord border is: 1 - Square or 0 - Circle", 0);
        var size = get_integer("Brush size", 1);
        var type = get_integer("Paint with type", 0);
        
        rng_gen(global.grid, coords, 0, 0.2, circle, size, type);
        
        global.upd = true;
    }

    // DO RNG PT SIZE
    if keyboard_check_pressed(vk_f3)
    {
        var coords = get_integer("Random Neighborhood Graph - Coordinate count", global.gridsize div 4);
        var circle = get_integer("RNG Coord border is: 1 - Square or 0 - Circle", 1);
        var rad = get_integer("RNG Base radius", 4);
//        var size = get_integer("Brush size", 1);
        var type = get_integer("Paint with type", 0);
        
        rng_gen_ptsize(global.grid, coords, 0, 0.2, circle, rad, type);
        
        global.upd = true;
    }

    // DO PROX RND
    if keyboard_check_pressed(vk_f4)
    {
        var mnrad = get_integer("Min rnd radius", 1);
        var mxrad = get_integer("Max rnd radius", 4);
        var live = get_integer("Chance of live cell generation 0-100", 15);
        var rpt = get_integer("Repeated iterations with set parameters", 1);
        
        prox_random(global.grid, 1, mnrad, mxrad, live, rpt);
        
        global.upd = true;
    }

    // DO caR1
    if keyboard_check_pressed(vk_f5)
    {
        var r1s = get_integer("R1s - Radius 1 N survival cutoff", 4)+1;
        var r1b = get_integer("R1b - Radius 1 N birth cutoff", 5)+1;
        var r2n = -1;
        var rpt = get_integer("Repeated iterations with set parameters", 1); 
        
        caR2(global.grid, 1, 0, r1s, r1b, r2n, rpt);
        
        global.upd = true;
    }

    // DO caR2
    if keyboard_check_pressed(vk_f6)
    {
        var r1s = get_integer("R1s - Radius 1 N survival cutoff", 4)+1;
        var r1b = get_integer("R1b - Radius 1 N birth cutoff", 5)+1;
        var r2n = get_integer("R2n - Radius 2 N cutoff", 2);
        var rpt = get_integer("Repeated iterations with set parameters", 1); 
        
        caR2(global.grid, 1, 0, r1s, r1b, r2n, rpt);
        
        global.upd = true;
    }

    // DO ca random
    if keyboard_check_pressed(vk_f7)
    {
        var r1s = get_integer("R1s - Radius 1 N survival cutoff", 4);
        var r1b = get_integer("live cutoff", 3);
        var r2n = get_integer("dead cutoff", 4);
        var rpt = get_integer("iterations", 25000); 
        var smooth = get_integer("smoothness", 3); 
        
        ca_random(global.grid, 1, 0, r1s, r1b, r2n, rpt, smooth);
        
        global.upd = true;
    }

/*    if keyboard_check_pressed(vk_f6)
    {
        caR2(global.mapgrid, get_integer("R1s", 4), get_integer("R1b", 5), get_integer("R2n cutoff", 2), get_integer("REPEATS", 1));
        global.upd = true;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW GRID SCALED
 
    var grid = global.grid;

    var sw = ds_grid_width(grid);
    var sh = ds_grid_height(grid);

    for(var w = 0; w &lt; sw; w++){
        for(var h = 0; h &lt; sh; h++){
        
        var cell = grid[# w, h];
        var col = make_colour_hsv(round(hue), 64, cell * 255);
        
        draw_set_color(col);
        draw_rectangle(w * p, h * p, w * p + p, h * p + p, false);
        
        }
    }
    
    hue += 0.25;
    hue = hue mod 255;
        
        
/*    if (!surface_exists(global.dsurf)) || (global.upd == true)
    {    
        var grid = global.grid;
    
        var sw = ds_grid_width(grid);
        var sh = ds_grid_height(grid);
        
        global.dsurf = surface_create(sw, sh);
        surface_set_target(global.dsurf);
        
        // CENTER
        
        maxz = global.scale;
        xsurf = 0;
        ysurf = 0;
//        xsurf = round((window_get_width() - (sw * maxz)) / 2);
//        ysurf = round((window_get_height() - (sh * maxz)) / 2);
        
        for(var w = 0; w &lt; sw; w++){
            for(var h = 0; h &lt; sh; h++){
            
            var cell = grid[# w, h];
            var col = make_colour_hsv(0, 0, cell * 255);
            
            draw_point_colour(w, h, col);
            }
        }
        
        surface_reset_target();
        draw_surface_ext(global.dsurf, xsurf, ysurf, maxz, maxz, 0, c_white, 1);
        global.upd = false;
    }
    else
    {        
        draw_surface_ext(global.dsurf, xsurf, ysurf, maxz, maxz, 0, c_white, 1);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
